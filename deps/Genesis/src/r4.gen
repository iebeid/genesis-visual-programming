# Checking aliases in lists

# 1. An alias in a list should be modified when its sibling is modified
let a name 1
let lst name <a alias a>
print "a=" a 
print "lst=" lst

let a name 2
print "Should print the same as the above with 'a=2' and 'lst=<1 2>'"
print "a=" a 
print "lst=" lst

let lst[2] name 3
print "Should print the same as the above with 'a=3' and 'lst=<1 3>'"
print "a =" a 
print "lst =" lst

# Try aliases to lists 

let l1 name <1 2 3>
let l2 name <l1 alias l1>
print "First list should be contained twice in the second list"
print "l1=" l1
print "l2=" l2
let l1 name "New l1"
print "First list should be contained once in the second list"
print "l1=" l1
print "l2=" l2

# Try aliases to lists that contain lists

let a name 1
let b name 2
let c name 3
let l1 name <a alias b c>
let l2 name <l1 alias l1>
print "First list should be contained twice in the second list"
print "l1=" l1
print "l2=" l2

let a name 7
let b name 8
let c name 9
print "First list should be contained twice in the second list with 2 changed to 8"
print "l1=" l1
print "l2=" l2

let l1 name [ 4 5 6 ]
print "First list should be contained once in the second list"
print "l1=" l1
print "l2=" l2

# How about names to list components?
let l1 name [ 4 5 6 ]
Let m name l1[2]
let m name 7
print "Should print
<4 5 6>
7"
print l1
print m

# How about aliases to list components?
let l1 name [ 4 5 6 ]
Let m alias l1[2]
let m name 7
print "Should print
<4 7 6>
7"
print l1
print m
