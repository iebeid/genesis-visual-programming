label =  LetName
format =  Let _StickyNote_ name _expression_ \n 
toolTip = Label a value

label =  LetAlias
format =  Let _StickyNote_ alias _expression_ \n
toolTip = Alias a value

label =  Unalias
format =  unalias _StickyNote_ \n 
toolTip = Erase an alias

label =Select
format =Select\n    _cond_ -> { _Step_ }\n    _cond_ -> { _Step_ } \n
toolTip =Select statements to execute

label =  Generate
format =  Generate each (_iterator_) from _list_  \n
toolTip = Generate elements from a list

label =  gListWhile
format =  Generate each (_iterator_) from _L_ while _cond_ \n   # no Task\n
toolTip = Generate while condition is true

label =  gListUntil
format =  Generate each (_iterator_) from _L_ until _cond_ \n    # no Task\n
toolTip = Generate until condition is true

label =  gFromToBy
format =  Generate each (_iterator_) from _#_ to _#_ by _#_ \n 
toolTip = Generate from a sequence

label =  Task
format =  [+] _when condition_\n   @first: { _Steps to do at first iteration point_ }\n   @iter: { _Steps to do on each iteration_ } \n   @last: { _Steps to do after the iteration completes_ }\n
toolTip = General task

label =  tPrint
format =  [+] _when condition_ \n   @i: Print _iterator_ \n 
toolTip = Print list values

label =  tCount
format =  [+] _when condition_ \n   @f: Let _count_ name 0 \n   @i: Let _count_ name _count_ + 1 \n 
toolTip = Count list elements 

label =  tModify
format =  [+] _when condition_  \n   @i: { Let _iterator_ name _expression_ } \n 
toolTip = Modify List 

label =  tSum
format =  [+] _when condition_ \n   @f: Let _var_ name _0_ \n   @i: Let _var_ name _var_  + _expression_  \n 
toolTip = Sum list elements

label =  tSmallest
format =  [+] when ( _iterator_ < _smallest_)\n   @f: Let _smallest_ name _L[1]_ \n   @i: Let _smallest_ name _iterator_ \n 
toolTip = Find smallest list element

label =  tLargest
format =  [+] when ( _iterator_ < _smallest_)\n   @f: Let _largest_ name _L[1]_ \n   @i: Let _largest_ name _iterator_ \n 
toolTip = Find largest list element

label =  tBuild
format =  [+] _when condition_ \n   @f: Let _NewList_ name <> \n   @i: Append _iterator_ onto _NewList_ \n 
toolTip = Copy list

label =Block
format ={\n  _Step_ \n  _Step_ \n} \n
toolTip = Code Block

label =Stop
format =Stop \n
toolTip = Stop

label =Define Function
format =Let _function name with parameters_ name function {\n #function algorithm\n    Let ans name _expression_\n    _Step_\n    _Step_\n    Return ans\n} \n 
toolTip =New Function 

label =Define Procedure
format =Let _procedure name with parameters_ name function {\n #procedure algorithm\n    _Step_\n    _Step_\n } \n 
toolTip = New Procedure 

